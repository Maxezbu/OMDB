{"ast":null,"code":"var _jsxFileName = \"/home/buru/bootcamp/25-OMDB/src/components/Movie.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { getOneByTitle } from \"../hooks/hookss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Movie = () => {\n  _s();\n\n  const [movie, setMovie] = useState({});\n  useEffect(() => {\n    getOneByTitle(\"batman\").then(data => setMovie(data));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"HOLAAA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Movie, \"vjn7l2Xfyv8U759KvgOto7g+Dfw=\");\n\n_c = Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["/home/buru/bootcamp/25-OMDB/src/components/Movie.jsx"],"names":["React","useState","useEffect","getOneByTitle","Movie","movie","setMovie","then","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,aAAa,CAAC,QAAD,CAAb,CAAwBI,IAAxB,CAA8BC,IAAD,IAAUF,QAAQ,CAACE,IAAD,CAA/C;AACD,GAFQ,CAAT;AAIA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAuBD,CA9BM;;GAAMJ,K;;KAAAA,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getOneByTitle } from \"../hooks/hookss\";\n\nexport const Movie = () => {\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    getOneByTitle(\"batman\").then((data) => setMovie(data));\n  });\n\n  return (\n    <>\n      <h1>HOLAAA</h1>\n      {/*  <h1>{movie.Title}</h1>\n    <br />\n    <img src={movie.Poster} alt={movie.Title} />\n    <br />\n    <h2>Description</h2>\n    {movie.Year}\n    {movie.Genre}\n    {movie.Lenguage}\n    {movie.Runtime}\n    {movie.Actors}\n    {movie.Ratings.map((ratings) => {\n      return (\n        <section key={movie.imdbID}>\n          <h3>{ratings.Source}</h3>\n          {ratings.Value}\n        </section>\n      );\n    })} */}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}