{"ast":null,"code":"import axios from \"axios\";\nimport { fromJS } from \"immutable\";\nexport const getManyByTitleAndType = (title, type) => {\n  return axios.get(`https://www.omdbapi.com/?apikey=20dac387&s=${title}&type=${type}\"`).then(response => response.data).then(data => data.Search);\n};\nexport const getOneByTitle = title => {\n  return axios.get(`https://www.omdbapi.com/?apikey=20dac387&t=${title}\"`).then(response => response.data).then(data => data);\n};\nexport const getBase = () => {\n  return axios.get(\"https://www.omdbapi.com/?apikey=20dac387&s=tragedia&y=2021\").then(response => response.data).then(data => data.Search);\n};\nexport const loadState = () => {\n  try {\n    const serializedData = localStorage.getItem(\"state\");\n\n    if (serializedData === null) {\n      return undefined; // Si no existe el state en el local storage devolvemos undefined para que cargue el state inicial que hayamos definido\n    }\n\n    return fromJS(JSON.parse(serializedData)); // Si encontramos con exito nuestro storage lo devolvemos.\n  } catch (error) {\n    return undefined; // Si ocurre algun error, devuelvo undefined para cargar el state inicial.\n  }\n};\nexport const saveState = state => {\n  try {\n    let serializedData = JSON.stringify(state.toJS());\n    localStorage.setItem(\"state\", serializedData);\n  } catch (error) {// Acá podemos capturar o crear cualquier log que deseemos en caso de que falle el salvado en el storage.\n  }\n};","map":{"version":3,"sources":["/home/buru/bootcamp/25-OMDB/src/hooks/hooks.js"],"names":["axios","fromJS","getManyByTitleAndType","title","type","get","then","response","data","Search","getOneByTitle","getBase","loadState","serializedData","localStorage","getItem","undefined","JSON","parse","error","saveState","state","stringify","toJS","setItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACpD,SAAOJ,KAAK,CACTK,GADI,CACC,8CAA6CF,KAAM,SAAQC,IAAK,GADjE,EAGJE,IAHI,CAGEC,QAAD,IAAcA,QAAQ,CAACC,IAHxB,EAIJF,IAJI,CAIEE,IAAD,IAAUA,IAAI,CAACC,MAJhB,CAAP;AAKD,CANM;AAQP,OAAO,MAAMC,aAAa,GAAIP,KAAD,IAAW;AACtC,SAAOH,KAAK,CACTK,GADI,CACC,8CAA6CF,KAAM,GADpD,EAGJG,IAHI,CAGEC,QAAD,IAAcA,QAAQ,CAACC,IAHxB,EAIJF,IAJI,CAIEE,IAAD,IAAUA,IAJX,CAAP;AAKD,CANM;AAQP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAOX,KAAK,CACTK,GADI,CACA,4DADA,EAGJC,IAHI,CAGEC,QAAD,IAAcA,QAAQ,CAACC,IAHxB,EAIJF,IAJI,CAIEE,IAAD,IAAUA,IAAI,CAACC,MAJhB,CAAP;AAKD,CANM;AAQP,OAAO,MAAMG,SAAS,GAAG,MAAM;AAC7B,MAAI;AACF,UAAMC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAvB;;AACA,QAAIF,cAAc,KAAK,IAAvB,EAA6B;AAC3B,aAAOG,SAAP,CAD2B,CACT;AACnB;;AACD,WAAOf,MAAM,CAACgB,IAAI,CAACC,KAAL,CAAWL,cAAX,CAAD,CAAb,CALE,CAKyC;AAC5C,GAND,CAME,OAAOM,KAAP,EAAc;AACd,WAAOH,SAAP,CADc,CACI;AACnB;AACF,CAVM;AAYP,OAAO,MAAMI,SAAS,GAAIC,KAAD,IAAW;AAClC,MAAI;AACF,QAAIR,cAAc,GAAGI,IAAI,CAACK,SAAL,CAAeD,KAAK,CAACE,IAAN,EAAf,CAArB;AACAT,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BX,cAA9B;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc,CACd;AACD;AACF,CAPM","sourcesContent":["import axios from \"axios\";\nimport { fromJS } from \"immutable\";\n\nexport const getManyByTitleAndType = (title, type) => {\n  return axios\n    .get(`https://www.omdbapi.com/?apikey=20dac387&s=${title}&type=${type}\"`)\n\n    .then((response) => response.data)\n    .then((data) => data.Search);\n};\n\nexport const getOneByTitle = (title) => {\n  return axios\n    .get(`https://www.omdbapi.com/?apikey=20dac387&t=${title}\"`)\n\n    .then((response) => response.data)\n    .then((data) => data);\n};\n\nexport const getBase = () => {\n  return axios\n    .get(\"https://www.omdbapi.com/?apikey=20dac387&s=tragedia&y=2021\")\n\n    .then((response) => response.data)\n    .then((data) => data.Search);\n};\n\nexport const loadState = () => {\n  try {\n    const serializedData = localStorage.getItem(\"state\");\n    if (serializedData === null) {\n      return undefined; // Si no existe el state en el local storage devolvemos undefined para que cargue el state inicial que hayamos definido\n    }\n    return fromJS(JSON.parse(serializedData)); // Si encontramos con exito nuestro storage lo devolvemos.\n  } catch (error) {\n    return undefined; // Si ocurre algun error, devuelvo undefined para cargar el state inicial.\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    let serializedData = JSON.stringify(state.toJS());\n    localStorage.setItem(\"state\", serializedData);\n  } catch (error) {\n    // Acá podemos capturar o crear cualquier log que deseemos en caso de que falle el salvado en el storage.\n  }\n};\n"]},"metadata":{},"sourceType":"module"}